{"filter":false,"title":"app.py","tooltip":"/shapeseekr_signup_form_beanstalk/app.py","undoManager":{"mark":33,"position":33,"stack":[[{"start":{"row":0,"column":0},"end":{"row":59,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, url_for","from flask_sqlalchemy import SQLAlchemy","from wtforms import Form, StringField, IntegerField, TextAreaField, SelectField","from wtforms.validators import InputRequired, Email, NumberRange, Length","","app = Flask(__name__)","app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://yourusername:yourpassword@localhost/yourdatabase'","app.config['SECRET_KEY'] = 'your-secret-key'","db = SQLAlchemy(app)","","class UserForm(Form):","    name = StringField('Name', validators=[InputRequired(), Length(max=20)])","    surname = StringField('Surname', validators=[InputRequired(), Length(max=20)])","    phone = IntegerField('Phone', validators=[InputRequired(), NumberRange(min=1000000000, max=9999999999)])","    email = StringField('Email', validators=[InputRequired(), Email(), Length(max=50)])","    sex = SelectField('Sex', choices=[('M', 'Male'), ('F', 'Female')], validators=[InputRequired()])","    age = IntegerField('Age', validators=[InputRequired(), NumberRange(min=1, max=120)])","    weight = IntegerField('Weight (kg)', validators=[InputRequired(), NumberRange(min=1, max=300)])","    height = IntegerField('Height (cm)', validators=[InputRequired(), NumberRange(min=1, max=300)])","    healthLimitations = TextAreaField('Health Limitations', validators=[Length(max=240)])","    dietPreference = SelectField('Diet Preference', choices=[('vegan', 'Vegan'), ('vegetarian', 'Vegetarian'), ('omnivore', 'Omnivore')], validators=[InputRequired()])","    trainingStyle = SelectField('Training Style', choices=[('powerlifting', 'Powerlifting'), ('bodybuilding', 'Bodybuilding'), ('crossfit', 'Crossfit')], validators=[InputRequired()])","    trainingLevel = SelectField('Training Level', choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], validators=[InputRequired()])","    trainingObjectives = TextAreaField('Training Objectives', validators=[Length(max=240)])","","@app.route('/', methods=['GET', 'POST'])","def user_form():","    form = UserForm(request.form)","    if request.method == 'POST' and form.validate():","        name = form.name.data","        surname = form.surname.data","        phone = form.phone.data","        email = form.email.data","        sex = form.sex.data","        age = form.age.data","        weight = form.weight.data","        height = form.height.data","        health_limitations = form.healthLimitations.data","        diet_preference = form.dietPreference.data","        training_style = form.trainingStyle.data","        training_level = form.trainingLevel.data","        training_objectives = form.trainingObjectives.data","        ","        # Save form data to database","        user = User(name=name, surname=surname, phone=phone, email=email, sex=sex, age=age, weight=weight, height=height, ","                    health_limitations=health_limitations, diet_preference=diet_preference, training_style=training_style, ","                    training_level=training_level, training_objectives=training_objectives)","        db.session.add(user)","        db.session.commit()","        ","        return redirect(url_for('success'))","    return render_template('user_form.html', form=form)","","@app.route('/success')","def success():","    return 'Form submission successful!'","","if __name__ == '__main__':","    app.run(debug=True)",""],"id":1}],[{"start":{"row":43,"column":8},"end":{"row":48,"column":27},"action":"remove","lines":["# Save form data to database","        user = User(name=name, surname=surname, phone=phone, email=email, sex=sex, age=age, weight=weight, height=height, ","                    health_limitations=health_limitations, diet_preference=diet_preference, training_style=training_style, ","                    training_level=training_level, training_objectives=training_objectives)","        db.session.add(user)","        db.session.commit()"],"id":2},{"start":{"row":43,"column":4},"end":{"row":43,"column":8},"action":"remove","lines":["    "]},{"start":{"row":43,"column":0},"end":{"row":43,"column":4},"action":"remove","lines":["    "]},{"start":{"row":42,"column":8},"end":{"row":43,"column":0},"action":"remove","lines":["",""]},{"start":{"row":42,"column":4},"end":{"row":42,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":42,"column":0},"end":{"row":42,"column":4},"action":"remove","lines":["    "],"id":3},{"start":{"row":41,"column":58},"end":{"row":42,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":6,"column":0},"end":{"row":8,"column":20},"action":"remove","lines":["app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://yourusername:yourpassword@localhost/yourdatabase'","app.config['SECRET_KEY'] = 'your-secret-key'","db = SQLAlchemy(app)"],"id":4},{"start":{"row":5,"column":21},"end":{"row":6,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":39},"action":"remove","lines":["from flask_sqlalchemy import SQLAlchemy"],"id":5}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"remove","lines":["",""],"id":6}],[{"start":{"row":48,"column":0},"end":{"row":48,"column":1},"action":"insert","lines":["a"],"id":7},{"start":{"row":48,"column":1},"end":{"row":48,"column":2},"action":"insert","lines":["p"]},{"start":{"row":48,"column":2},"end":{"row":48,"column":3},"action":"insert","lines":["p"]},{"start":{"row":48,"column":3},"end":{"row":48,"column":4},"action":"insert","lines":["l"]}],[{"start":{"row":48,"column":3},"end":{"row":48,"column":4},"action":"remove","lines":["l"],"id":8}],[{"start":{"row":48,"column":3},"end":{"row":48,"column":4},"action":"insert","lines":["."],"id":9},{"start":{"row":48,"column":4},"end":{"row":48,"column":5},"action":"insert","lines":["d"]},{"start":{"row":48,"column":5},"end":{"row":48,"column":6},"action":"insert","lines":["b"]},{"start":{"row":48,"column":6},"end":{"row":48,"column":7},"action":"insert","lines":["e"]},{"start":{"row":48,"column":7},"end":{"row":48,"column":8},"action":"insert","lines":["u"]}],[{"start":{"row":48,"column":7},"end":{"row":48,"column":8},"action":"remove","lines":["u"],"id":10},{"start":{"row":48,"column":6},"end":{"row":48,"column":7},"action":"remove","lines":["e"]},{"start":{"row":48,"column":5},"end":{"row":48,"column":6},"action":"remove","lines":["b"]},{"start":{"row":48,"column":4},"end":{"row":48,"column":5},"action":"remove","lines":["d"]}],[{"start":{"row":48,"column":3},"end":{"row":48,"column":4},"action":"remove","lines":["."],"id":11},{"start":{"row":48,"column":2},"end":{"row":48,"column":3},"action":"remove","lines":["p"]},{"start":{"row":48,"column":1},"end":{"row":48,"column":2},"action":"remove","lines":["p"]},{"start":{"row":48,"column":0},"end":{"row":48,"column":1},"action":"remove","lines":["a"]}],[{"start":{"row":47,"column":23},"end":{"row":48,"column":0},"action":"remove","lines":["",""],"id":12}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":21},"action":"remove","lines":["app = Flask(__name__)"],"id":25},{"start":{"row":4,"column":0},"end":{"row":4,"column":21},"action":"insert","lines":["app = Flask(__name__)"]}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":23},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, url_for","from wtforms import Form, StringField, IntegerField, TextAreaField, SelectField","from wtforms.validators import InputRequired, Email, NumberRange, Length","","app = Flask(__name__)","","class UserForm(Form):","    name = StringField('Name', validators=[InputRequired(), Length(max=20)])","    surname = StringField('Surname', validators=[InputRequired(), Length(max=20)])","    phone = IntegerField('Phone', validators=[InputRequired(), NumberRange(min=1000000000, max=9999999999)])","    email = StringField('Email', validators=[InputRequired(), Email(), Length(max=50)])","    sex = SelectField('Sex', choices=[('M', 'Male'), ('F', 'Female')], validators=[InputRequired()])","    age = IntegerField('Age', validators=[InputRequired(), NumberRange(min=1, max=120)])","    weight = IntegerField('Weight (kg)', validators=[InputRequired(), NumberRange(min=1, max=300)])","    height = IntegerField('Height (cm)', validators=[InputRequired(), NumberRange(min=1, max=300)])","    healthLimitations = TextAreaField('Health Limitations', validators=[Length(max=240)])","    dietPreference = SelectField('Diet Preference', choices=[('vegan', 'Vegan'), ('vegetarian', 'Vegetarian'), ('omnivore', 'Omnivore')], validators=[InputRequired()])","    trainingStyle = SelectField('Training Style', choices=[('powerlifting', 'Powerlifting'), ('bodybuilding', 'Bodybuilding'), ('crossfit', 'Crossfit')], validators=[InputRequired()])","    trainingLevel = SelectField('Training Level', choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], validators=[InputRequired()])","    trainingObjectives = TextAreaField('Training Objectives', validators=[Length(max=240)])","","@app.route('/', methods=['GET', 'POST'])","def user_form():","    form = UserForm(request.form)","    if request.method == 'POST' and form.validate():","        name = form.name.data","        surname = form.surname.data","        phone = form.phone.data","        email = form.email.data","        sex = form.sex.data","        age = form.age.data","        weight = form.weight.data","        height = form.height.data","        health_limitations = form.healthLimitations.data","        diet_preference = form.dietPreference.data","        training_style = form.trainingStyle.data","        training_level = form.trainingLevel.data","        training_objectives = form.trainingObjectives.data","        ","        return redirect(url_for('success'))","    return render_template('user_form.html', form=form)","","@app.route('/success')","def success():","    return 'Form submission successful!'","","if __name__ == '__main__':","    app.run(debug=True)"],"id":26},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["}"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["}"],"id":27}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, jsonify","","app = Flask(__name__)","","# Define dropdown list options","training_styles = ['Weightlifting', 'Yoga', 'Cardio', 'CrossFit']","training_levels = ['Beginner', 'Intermediate', 'Advanced']","diet_preferences = ['Vegetarian', 'Vegan', 'Gluten-free', 'Ketogenic']","","# Define form validation function","def validate_form(form):","    # Check required fields are not empty","    if not form['name'] or not form['surname'] or not form['phone'] or not form['email']:","        return 'Please fill out all required fields'","    ","    # Check phone number is valid","    try:","        int(form['phone'])","    except ValueError:","        return 'Please enter a valid phone number'","    ","    # Check email is valid","    if '@' not in form['email']:","        return 'Please enter a valid email address'","    ","    # Check age, weight, and height are valid integers","    for field in ['age', 'weight', 'height']:","        if not form[field]:","            return 'Please enter a value for ' + field","        try:","            int(form[field])","        except ValueError:","            return 'Please enter a valid integer value for ' + field","    ","    # Validation passed","    return None","","# Define main route that displays the form","@app.route('/', methods=['GET'])","def index():","    return render_template('index.html', training_styles=training_styles, ","                           training_levels=training_levels, diet_preferences=diet_preferences)","","# Define route that processes the form submission","@app.route('/submit', methods=['POST'])","def submit():","    # Validate form","    error = validate_form(request.form)","    if error:","        return jsonify({'success': False, 'error': error})","    ","    # Form is valid, return form data","    return jsonify({'success': True, 'data': request.form})","","if __name__ == '__main__':","    app.run(debug=True)",""],"id":28}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, jsonify","","app = Flask(__name__)","","# Define dropdown list options","training_styles = ['Weightlifting', 'Yoga', 'Cardio', 'CrossFit']","training_levels = ['Beginner', 'Intermediate', 'Advanced']","diet_preferences = ['Vegetarian', 'Vegan', 'Gluten-free', 'Ketogenic']","","# Define form validation function","def validate_form(form):","    # Check required fields are not empty","    if not form['name'] or not form['surname'] or not form['phone'] or not form['email']:","        return 'Please fill out all required fields'","    ","    # Check phone number is valid","    try:","        int(form['phone'])","    except ValueError:","        return 'Please enter a valid phone number'","    ","    # Check email is valid","    if '@' not in form['email']:","        return 'Please enter a valid email address'","    ","    # Check age, weight, and height are valid integers","    for field in ['age', 'weight', 'height']:","        if not form[field]:","            return 'Please enter a value for ' + field","        try:","            int(form[field])","        except ValueError:","            return 'Please enter a valid integer value for ' + field","    ","    # Validation passed","    return None","","# Define main route that displays the form","@app.route('/', methods=['GET'])","def index():","    return render_template('index.html', training_styles=training_styles, ","                           training_levels=training_levels, diet_preferences=diet_preferences)","","# Define route that processes the form submission","@app.route('/submit', methods=['POST'])","def submit():","    # Validate form","    error = validate_form(request.form)","    if error:","        return jsonify({'success': False, 'error': error})","    ","    # Form is valid, return form data","    return jsonify({'success': True, 'data': request.form})","","if __name__ == '__main__':","    app.run(debug=True)",""],"id":29},{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, jsonify","","app = Flask(__name__)","","# Define dropdown list options","training_styles = ['Weightlifting', 'Yoga', 'Cardio', 'CrossFit']","training_levels = ['Beginner', 'Intermediate', 'Advanced']","diet_preferences = ['Vegetarian', 'Vegan', 'Gluten-free', 'Ketogenic']","","# Define form validation function","def validate_form(form):","    # Check required fields are not empty","    if not form['name'] or not form['surname'] or not form['phone'] or not form['email']:","        return 'Please fill out all required fields'","    ","    # Check phone number is valid","    try:","        int(form['phone'])","    except ValueError:","        return 'Please enter a valid phone number'","    ","    # Check email is valid","    if '@' not in form['email']:","        return 'Please enter a valid email address'","    ","    # Check age, weight, and height are valid integers","    for field in ['age', 'weight', 'height']:","        if not form[field]:","            return 'Please enter a value for ' + field","        try:","            int(form[field])","        except ValueError:","            return 'Please enter a valid integer value for ' + field","    ","    # Validation passed","    return None","","# Define main route that displays the form","@app.route('/', methods=['GET'])","def index():","    return render_template('index.html', training_styles=training_styles, ","                           training_levels=training_levels, diet_preferences=diet_preferences)","","# Define route that processes the form submission","@app.route('/submit', methods=['POST'])","def submit():","    # Validate form","    error = validate_form(request.form)","    if error:","        return jsonify({'success': False, 'error': error})","    ","    # Form is valid, return form data","    return jsonify({'success': True, 'data': request.form})","","if __name__ == '__main__':","    app.run(debug=True)",""]}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, jsonify","","app = Flask(__name__)","","# Define dropdown list options","training_styles = ['Weightlifting', 'Yoga', 'Cardio', 'CrossFit']","training_levels = ['Beginner', 'Intermediate', 'Advanced']","diet_preferences = ['Vegetarian', 'Vegan', 'Gluten-free', 'Ketogenic']","","# Define form validation function","def validate_form(form):","    # Check required fields are not empty","    if not form['name'] or not form['surname'] or not form['phone'] or not form['email']:","        return 'Please fill out all required fields'","    ","    # Check phone number is valid","    try:","        int(form['phone'])","    except ValueError:","        return 'Please enter a valid phone number'","    ","    # Check email is valid","    if '@' not in form['email']:","        return 'Please enter a valid email address'","    ","    # Check age, weight, and height are valid integers","    for field in ['age', 'weight', 'height']:","        if not form[field]:","            return 'Please enter a value for ' + field","        try:","            int(form[field])","        except ValueError:","            return 'Please enter a valid integer value for ' + field","    ","    # Validation passed","    return None","","# Define main route that displays the form","@app.route('/', methods=['GET'])","def index():","    return render_template('index.html', training_styles=training_styles, ","                           training_levels=training_levels, diet_preferences=diet_preferences)","","# Define route that processes the form submission","@app.route('/submit', methods=['POST'])","def submit():","    # Validate form","    error = validate_form(request.form)","    if error:","        return jsonify({'success': False, 'error': error})","    ","    # Form is valid, return form data","    return jsonify({'success': True, 'data': request.form})","","if __name__ == '__main__':","    app.run(debug=True)",""],"id":30}],[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from flask import Flask, render_template","","app = Flask(__name__)",""],"id":31}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":[" "],"id":32}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"remove","lines":[" "],"id":33}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":34}],[{"start":{"row":4,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["@app.route('/signup')","def signup():","    return render_template('signup.html')",""],"id":35}],[{"start":{"row":6,"column":33},"end":{"row":6,"column":34},"action":"remove","lines":["p"],"id":36},{"start":{"row":6,"column":32},"end":{"row":6,"column":33},"action":"remove","lines":["u"]},{"start":{"row":6,"column":31},"end":{"row":6,"column":32},"action":"remove","lines":["n"]},{"start":{"row":6,"column":30},"end":{"row":6,"column":31},"action":"remove","lines":["g"]},{"start":{"row":6,"column":29},"end":{"row":6,"column":30},"action":"remove","lines":["i"]},{"start":{"row":6,"column":28},"end":{"row":6,"column":29},"action":"remove","lines":["s"]}],[{"start":{"row":6,"column":28},"end":{"row":6,"column":29},"action":"insert","lines":["i"],"id":37},{"start":{"row":6,"column":29},"end":{"row":6,"column":30},"action":"insert","lines":["n"]},{"start":{"row":6,"column":30},"end":{"row":6,"column":31},"action":"insert","lines":["d"]},{"start":{"row":6,"column":31},"end":{"row":6,"column":32},"action":"insert","lines":["e"]},{"start":{"row":6,"column":32},"end":{"row":6,"column":33},"action":"insert","lines":["x"]}],[{"start":{"row":7,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":38}],[{"start":{"row":8,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["@app.route('/signup', methods=['POST'])","def signup_submit():","    name = request.form['name']","    email = request.form['email']","    password = request.form['password']","    print(f'Name: {name}, Email: {email}, Password: {password}')","    return 'Thanks for signing up!'",""],"id":39}],[{"start":{"row":15,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["",""],"id":40}],[{"start":{"row":16,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["if __name__ == '__main__':","    app.run()",""],"id":41}],[{"start":{"row":0,"column":40},"end":{"row":0,"column":41},"action":"insert","lines":[","],"id":42}],[{"start":{"row":0,"column":41},"end":{"row":0,"column":42},"action":"insert","lines":[" "],"id":43},{"start":{"row":0,"column":42},"end":{"row":0,"column":43},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":42},"end":{"row":0,"column":43},"action":"remove","lines":["e"],"id":44}],[{"start":{"row":0,"column":42},"end":{"row":0,"column":43},"action":"insert","lines":["r"],"id":45},{"start":{"row":0,"column":43},"end":{"row":0,"column":44},"action":"insert","lines":["e"]},{"start":{"row":0,"column":44},"end":{"row":0,"column":45},"action":"insert","lines":["q"]},{"start":{"row":0,"column":45},"end":{"row":0,"column":46},"action":"insert","lines":["u"]},{"start":{"row":0,"column":46},"end":{"row":0,"column":47},"action":"insert","lines":["e"]},{"start":{"row":0,"column":47},"end":{"row":0,"column":48},"action":"insert","lines":["s"]},{"start":{"row":0,"column":48},"end":{"row":0,"column":49},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":0},"end":{"row":18,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request","","app = Flask(__name__)","","@app.route('/signup')","def signup():","    return render_template('index.html')","","@app.route('/signup', methods=['POST'])","def signup_submit():","    name = request.form['name']","    email = request.form['email']","    password = request.form['password']","    print(f'Name: {name}, Email: {email}, Password: {password}')","    return 'Thanks for signing up!'","","if __name__ == '__main__':","    app.run()",""],"id":46},{"start":{"row":0,"column":0},"end":{"row":24,"column":21},"action":"insert","lines":["from flask import Flask","from flask import jsonify","","application = Flask(__name__)","","","@application.route(\"/\")","def hello():","    \"\"\"Return a friendly HTTP greeting.\"\"\"","    print(\"I am inside hello world\")","    return \"Continuous Delivery Demo\"","","","@application.route(\"/echo/<name>\")","def echo(name):","    print(f\"This was placed in the url: new-{name}\")","    val = {\"new-name\": name}","    return jsonify(val)","","","if __name__ == \"__main__\":","    # Setting debug to True enables debug output. This line should be","    # removed before deploying a production app.","    application.debug = True","    application.run()"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":24,"column":21},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1681336168400,"hash":"6cce406e5f21f166d03fa47a1a92c42465cd3412"}